""" Config files in XDG paths
" Note: vimrc is also in $XDG_CONFIG_HOME/vim, but vim only knows that through
" the VIMINIT env variable
if empty($XDG_CONFIG_HOME)
    let $XDG_CONFIG_HOME = $HOME . "/.config"
endif

let &runtimepath = $XDG_CONFIG_HOME . "/vim," . &runtimepath
let &packpath = $XDG_CONFIG_HOME . "/vim," . &packpath

""" Use UTF-8 encoding
set encoding=utf-8

""" Use spacebar as leader
let mapleader = "\<space>"

""" Swap, undo history and viminfo go in XDG cache path
if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME = $HOME . "/.cache"
endif

set swapfile
if !isdirectory($XDG_CACHE_HOME . "/vim/swap")
    silent call mkdir($XDG_CACHE_HOME . "/vim/swap", 'p')
endif
set directory=$XDG_CACHE_HOME/vim/swap//,.

set undofile
if !isdirectory($XDG_CACHE_HOME . "/vim/undo")
    silent call mkdir($XDG_CACHE_HOME . "/vim/undo", "p")
endif
set undodir=$XDG_CACHE_HOME/vim/undo//,.

set viminfofile=$XDG_CACHE_HOME/vim/viminfofile

""" Backups go in XDG user data path
if empty($XDG_DATA_HOME)
    let $XDG_DATA_HOME = $HOME . "/.local/share"
endif

set backup
set writebackup
if !isdirectory($XDG_DATA_HOME . "/vim/backup")
    silent call mkdir($XDG_DATA_HOME . "/vim/backup", "p")
endif
set backupdir=$XDG_DATA_HOME/vim/backup//,.

""" Jump to last cursor position after opening a file
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

""" Stop netrw from keeping history
let g:netrw_dirhistmax = 0

""" Use paths relative to current file
set autochdir

""" Command history
set history=1000

""" Don't redraw when running macros
set lazyredraw

""" Backspace through startpoint, eol, etc.
set backspace=indent,eol,start

""" Search and replace
set incsearch
set hlsearch
set ignorecase
set smartcase
set gdefault
" clear search highlights
nnoremap <silent> <leader><leader> :noh<CR>
" recover search highlights
nnoremap <silent> <leader>/ :set hlsearch<CR>

""" Default indentation rules
set expandtab
set shiftwidth=4
set smarttab

""" Visual autocomplete commands
set wildmenu

""" Colors
set background=dark
if &t_Co > 255
    " enable italics before setting gruvbox (as per gruvbox's instructions)
    let g:gruvbox_italic=1
    colorscheme gruvbox
    " Use true color (24bit)
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    " Use colors for terminal too (hacky solution)
    if exists("g:vimshell_escape_colors")
        let g:terminal_ansi_colors = g:vimshell_escape_colors
    endif
    " Highlight cursor line
    set cursorline
else
    colorscheme pablo
endif

""" Set standard text width, and highlight first out-of-bounds column
set textwidth=80
set colorcolumn=81

""" Cursor shapes for terminal
if exists('$TMUX')
    let &t_SI = "\ePtmux;\<Esc>\<Esc>[6 q\<Esc>\\"
    let &t_SR = "\ePtmux;\<Esc>\<Esc>[4 q\<Esc>\\"
    let &t_EI = "\ePtmux;\<Esc>\<Esc>[2 q\<Esc>\\"
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif

""" Display status bar with filetype, line and column numbers
set laststatus=2
set statusline=%<%f\ %h%m%r%=%y\ %-14.(%l,%c%V%)\ %P

""" Display relative line numbers
set number
set relativenumber

""" Show folds on left side column, start with all folds open
set foldcolumn=1
set foldmethod=syntax
autocmd BufWinEnter * silent! :%foldopen!

""" Syntax highlighting and indentation
syntax on
filetype plugin indent on
""" Small changes to default C and C++ indentation:
" - do not indent switch cases
" - do not indent C++ access modifiers
" - do not indent C++ namespaces
" - align after open parentheses
set cinoptions=:0,l1,g0,N-s,(0

""" Draw on abnormal whitespace
set list listchars=tab:»-,trail:·,nbsp:~,extends:→,precedes:←
set showbreak=↳

""" Do not wrap long line
set nowrap

""" Scroll before reaching end of screen
set scrolloff=4

""" Splits open below and to the right
set splitbelow
set splitright

""" Allow me to move away from modified buffers
set hidden

""" Display current command as it gets typed
set showcmd

""" Disable "Type qa! and press <Enter> to exit" message
nnoremap <C-c> <silent> <C-c>

""" Enable mouse if possible
if has('mouse')
    set mouse=a
endif

""" Allow moving beyond end of lines in visual block
set virtualedit=block

""" Shortcuts for closing, quitting, saving
noremap <leader>d :bd<CR>
noremap <leader>q :q<CR>
noremap <leader>x :x<CR>

""" Shortcuts for moving between buffers and splits
noremap <leader>n :bn<CR>
noremap <leader>N :bp<CR>
noremap <leader>p :bp<CR>
noremap <leader>b :b#<CR>
noremap <leader>w <C-w>
noremap <leader>o <C-w>o<CR>

""" Open terminal
noremap <leader>T :terminal<CR>
noremap <leader>vT :vertical terminal<CR>

""" Shortcuts for toggles
noremap <leader>tl :set wrap!<CR>
noremap <leader>tn :set number!<CR>
noremap <leader>tr :set relativenumber!<CR>
noremap <leader>tw :set list!<CR>

""" Shortcuts for editing related stuff
" toggle comment line/block/movement/count
nmap <leader>c <Plug>CommentaryLine
vmap <leader>c <Plug>Commentary
nmap <leader>C <Plug>Commentary<Plug>Commentary
" increment/decrement number under cursor
noremap <leader>+ <c-a>
noremap <leader>- <c-x>
" remove trailing whitespace:
noremap <silent> <leader>W :%s/\s\+$//e<CR>

""" Preview markdown files with grip:
nnoremap <silent> <leader>m :terminal ++hidden ++close grip -b % 0<CR>

""" YouCompleteMe setup
let g:ycm_server_python_interpreter='python2'
let g:ycm_always_populate_location_list=1
noremap <leader>E :YcmDiags<CR>
noremap <leader>ed :YcmShowDetailedDiagnostic<CR>
noremap <leader>ee :YcmForceCompileAndDiagnostics<CR>
noremap <leader>ef :YcmCompleter FixIt<CR>
noremap <silent> <leader>en :try<bar>lnext<bar>catch /^Vim\%((\a\+)\)\=:E\%(553\):/<bar>lfirst<bar>catch /^Vim\%((\a\+)\)\=:E\%(42\):/<bar>echo "No errors"<bar>endtry<cr>
noremap <silent> <leader>eN :try<bar>lprevious<bar>catch /^Vim\%((\a\+)\)\=:E\%(553\):/<bar>llast<bar>catch /^Vim\%((\a\+)\)\=:E\%(42\):/<bar>echo "No errors"<bar>endtry<cr>
noremap <silent> <leader>ep :try<bar>lprevious<bar>catch /^Vim\%((\a\+)\)\=:E\%(553\):/<bar>llast<bar>catch /^Vim\%((\a\+)\)\=:E\%(42\):/<bar>echo "No errors"<bar>endtry<cr>
noremap <leader>f :YcmCompleter Format<CR>
noremap <leader>g :YcmCompleter GoTo<CR>

""" altr setup (jump to alternative file, header file, etc)
map <leader>a <Plug>(altr-forward)
map <leader>A <Plug>(altr-back)

""" buftabline setup (show buffers in tabline)
let g:buftabline_numbers=1
let g:buftabline_indicators=1

""" vimwiki setup
let g:vimwiki_list = [{'path': '$XDG_DATA_HOME/vimwiki/'}]
